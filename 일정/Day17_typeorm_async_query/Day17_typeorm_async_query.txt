https://wildojisan.tistory.com/46

npm install hono typeorm reflect-metadata pg dotenv
npm install -D typescript ts-node @types/node
npm install rimraf
npm install cross-env
npm i -g typeorm-model-generator

DB 드라이버,
DB 관리모듈,
DB 테이블 자동 코드화,
환경변수 설정(개발접속이랑, 운영접속이랑 분리한다),
rimraf 라고 안정적인 컴파일러

typeorm-model-generator : 
DB 테이블을 전부 코드화 시켜줌.
단점 한가지 : GIS 기능은 코드화 이상하게함

typeorm-model-generator -h localhost -d test1 -u postgres 
-x aaaa -e postgres -o ./src

-h 다음이 db 주소
-d 다음이 접속할 database 이름
-u 다음이 username
-x 다음이 비번
-e 다음이 DB 엔진 이름
-o 다음이 코드 만드는 경로

.env 는 DB접속정보 적는곳

package.json - nodejs 에서 핵심인 부분.
  담당하는건 실행방식, 모듈관리

"scripts": {
  "clean": "rimraf dist",
  "dev": "cross-env NODE_ENV=development tsx watch src/index.ts",
  "build": "npm run clean && tsc",
  "start": "npm run build && cross-env NODE_ENV=production node dist/index.js"
},

이론만 설명 하자면, 개발모드와 운영모드 실행방식을 나눔
scripts 여기를 뜯어 고치면 실행방식을 내맘대로 조정가능. 근데 이거 뜯어 고치는거 공부하지는 않음
그냥 GPT 한테 해달라함
프로젝트 만들때마다 다 뜯어고치냐? 아님. 그냥 복붙하고 추가하고 끝



typeorm db 접속 정리 -
1. 필요한 모듈들 npm i 로 설치
2. tsconfig.json 수정. {
   "target": "ES2020",
    "module": "CommonJS",
    "esModuleInterop": true,
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true
}

3. .env.development, .env.production 파일 로트에 생성

4. DB_HOST=localhost
DB_PORT=5432
DB_USERNAME=hono_user
DB_PASSWORD=password123
DB_NAME=hono_db
이거 .env에 내용 적어주기

5. data-source1.ts 파일 만들고 안에 코드 복붙으로 적어주기

6. typeorm model generator 돌려주기

7. src/index.ts 파일에 코드 추가


typeorm, pg
pg - postgres DB 엔진. 이것만 달랑 설치해서 진짜 서비스 돌리면 에러가 많이 생김
  어려운 말을 좀 쓰면 connection pool 관리가 안됨
typeorm - connection pool 관리를 자동으로 해줌. 사용자가 1000명이든 1억명이든 상관없음.
  + 데이터 조회, 수정, 삭제 에 관한것도 다 제공해줌


비동기 - 
  // 빠른코드
  const dummy1Repo = AppDataSource.getRepository(TDummy1);

  // 빠른코드
  let data: any;
  // 느린코드
  data = dummy1Repo.find();
  //빠른코드
  let dummy2 = 1 + 1;
  //빠른코드
  return c.json({ data, dummy2 });
느린코드는 코라인 1번에 위치하건, 맨 마지막에 위치하건, 무조건 맨 나중에 실행

