https://wildojisan.tistory.com/49
- jwt

insert 와 update 을 합치는 API Endpoint 실무 예제

session 로그인과 토큰 로그인 개념설명.
jwt 토큰구현, 암호화 구현



DB 에는 commit 이라는 개념이 있습니다.
코드에서 여러가지 연산을 하는과정에서 일일히 다 저장이 되면, DB가 과부하 걸립니다
그래서 코드에서 저장해라(.save()) 함수를 실행 시켜야만 진짜 DB에 저장이 됨


로그인에는 session 방식과 토큰 방식이 있습니다.
session 방식은 서버에서 html을 제공할때 자주 쓰입니다.
근데 문제가, 요즘 서버는 웹만 하진 않아요.
요즘 서버는 웹도하고, 모바일도 하고, 간단한 tcp 통신 다 커버해요
그러면 세션로그인으로 구현하면, 다른 기기들이 문제가 생겨요.

그래서 요즘엔 토큰 로그인 방식을 씁니다.
토큰 방식을 쉽게 얘기하면 신분증 같은거.
클라이언트가 서버에 요청할때, 토큰(신분증을 같이 보내요)

npm install hono jsonwebtoken bcrypt
npm install -D typescript ts-node @types/node @types/jsonwebtoken @types/bcrypt

-- 회원 테이블
CREATE TABLE t_user (
    idp SERIAL PRIMARY KEY,           -- PK
    username VARCHAR(50) NOT NULL,    -- 사용자 이름 (예시 필드)
    email VARCHAR(100) NOT NULL,      -- 이메일 (예시 필드)
    password VARCHAR(255) NOT NULL,   -- 비밀번호 (예시 필드, 해시된 값 저장)
    created_at TIMESTAMPTZ DEFAULT NOW() -- 생성일시
);

-- 권한 테이블
CREATE TABLE t_user_roles (
    idp SERIAL PRIMARY KEY,           -- PK
    user_idp INTEGER NOT NULL,        -- FK (회원 idp 참조)
    role_name VARCHAR(50) NOT NULL,   -- 권한 이름 (예: ROLE_USER, ROLE_ADMIN 등)
    assigned_at TIMESTAMPTZ DEFAULT NOW(), -- 권한 부여 일시

    -- FK 설정 (ON DELETE CASCADE: 회원 삭제 시 해당 권한도 삭제됨)
    CONSTRAINT fk_user
        FOREIGN KEY (user_idp)
        REFERENCES t_user (idp)
        ON DELETE CASCADE
);