https://wildojisan.tistory.com/44

https://wildojisan.tistory.com/45


IT 에서 서버라고 하면 굉장히 포괄적인 의미가 있다.
- 진짜 하드웨어 컴퓨터 서버
* 물리컴퓨터, (클라우드 o), 그리드...

- 소프트웨어 서버가 있다 O
* ngninix , tomcat 같은 앞단 서버
* 스프링, asp.net, fastapi, nodejs ....
- 소프트웨어 서버도 허것날 새로 나오고, 버전업데이트되고 해도
  핵심 기능은 서로 비슷하다
  새로운 서버 나올때마다 긴장할 필요는 없다
- nodejs -> hono 라는 서버를 쓸거에요
  왜냐? 서버가 하는기능 다 하고, 버그도 다 잡혀있고, 무엇보다 코드가 짧다
  다른서버들이 되는거 다 되면서, 딸깍 수준로 고차원 작업들이 되니, 안쓸 이유가 없다

  서버란 무엇인가요?
  SW 서버 관점 - 클라이언트 (postman), 서버 (practice1)

LAN = 건물안에 모뎀에 연결된 컴퓨터에 접속 가능 (http://192.168.45.182:3000)
      핸드폰 데이터끄고 저기 접속하면 접속 안됨
WAN = 구글, 네이버 접속하는 방식

public IP= 진짜 컴퓨터 주소
도메인은 = 카페24같은곳에서 가지고 있는 인터넷주소
도메인과 public IP를 연결 = 네트워크가 형성됬다.

포트번호 - 한 방 안에 의자에 번호가 매겨진 것처럼, 한 컴퓨터에는 여러개의 프로그램이 돌아감
         어느 프로그램에 접속할까? 이걸 프로그램에 번호를 매김


ORM - 데이터베이스와 서버를 연결해주고, 어려운 SQL을 안써도 왠만환 작업들 가능.
SQL : DB를 조작하는 언어. 이거쓰면 굉장한거 다함...
문제가 에러검출 하나도 안됨.

기본적으로 SQL은 100줄 치고 1000줄까지도 가는데 어디서 에러나는지 안알려줌.
그러면 그거 다 까서 찾는데 기본적으로 몇시간 날라감
하지만 orm은 저 몇백줄 치는 쿼리를 몇줄로 줄여주고, 에러 검출도 해줌

하지만 ORM은 진짜 DB의 기능을 50%밖에 못씀

FILE UPLOAD - 서버로 파일을 업로드 해서 저장하는 개념인데, 어떤 서비를 쓰냐에
    따라서 코드와 방식이 다 다름.

SOCKET - 채팅기능. 어렵게 말하면 양방향 비동기 통신
ERROR HANDLING - try catch
CORS - HTML 소스보기한다음, 코드위조 방지
HTTP - 가장 쉬움. 그래서 가장 많이 쓰여요. 
      개념 : 클라이언트가 요청하면, 서버가 줄때까지 기다리고,
           서버가 작업이 끝나면, 클라이언트에게 응답한다

비동기- 이건 모든코드가 하나하나 실행할때까지 다 기다리지 않음.
     쉽게 얘기하면, 빠른거 먼저, 느린거 나중에
     메인 쓰레드는 쉬운거, 백그라운드 Q는 느린거로 분리해서 실행
     비동기를 쓰면 프리징이 안걸림
     비동기를 더 쉽게 생각하면 스타크래프트 라고 생각하자.
     유닛하나 동작 끝날때까지 기다리지 않고, 다들 각자 하고싶은데로 막 한다